/* JAVASCRIPT */
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
-Este lenguaja trabaja 100% a trabajar de forma web

-trabaja de forma dinamica
es un programa que no necita colpilacion para poder trabajar en el, es un rumtime

-esta orientada a objetos
se crea un solo objeto que sera el padre el cual se utilizara para crear otros componenetes
como el usuario se crea un solo formato para luego reutilizarlo para otros componenstes
es la misma programacion que usa Java

-debilmente tipado
esta es una caracteristica que permite al prgramador escribir deforma no rigida el codigo
y javascript lo interpretara como ejemplo tenemos

4 + "7"; // 47
4 * "7"; // 28
2 + true; // 3
false - 3; // -3

--Forwards
ser compatible con versiones futuras significa que
incluir una adicion al lenguaje en un programa no causaria 
que se rompa si se ejecuta en un motor JS anterior.JS 
no es compatible con versiones futuras.

--JS ES BACKWARDS COMPATIBLE
la compatibilidad con versiones anteriores
significa que cuando se acepta con JS valido,
no habra un cambio futuro que haga que el codigo deje de funcionar.


--------------------------------------------------------------------------------------------------------------------------
--CLASE 2 ----------------------------------------------------------------------------------------------------------------

WebAssembly: lenguaje que se usa para crear aplicaciones web sin html ni css ni js

-desarrollo web
en el desarrollo web se tiene framword especificos que ayudan en la contruccion estructural
para hacer productos web mas robustos entre estos estan
--Angular.js
--vue.js
--react.js
--node.js: para trabajar con backend y frontend y se puede trabajar con IOT

--------------------------------------------------------------------------------------------------------------------------
--CLASE 3 ----------------------------------------------------------------------------------------------------------------
--Elementos de lenguje de programacion--
   datos que ese guardan en memoria
   tareas(funciones) que se hace con la data

nota: (trabajare con visual studio code) se puede trabajar con atom

en la carpeta try se encontrarar los ejercicios relaizados de este cuerso desde cero 
para este primera clase comensaremos con los tipos de valores 

--number
40, 10, 20

--string
"Jose Daniel Martínez Cáceres"
"esta es una cadena un string"

--booleano
true
falce 

--valores vacios: con valores recervados par acuando hay un valor faltante 
null 	
undefined

--valores (no primitivos o objetos):
array [1,2,3,5] este es un un arreglo 
objeto {} este es un objeto de tipo objeto

-- con la palabra recervada typeof puedo saber que tipo de variable

--------------------------------------------------------------------------------------------------------------------------
--clase 4 ¿Qué es una variable?-------------------------------------------------------------------------------------------

 -variable: representacion de un lugar en memoria parpoder guardar algun valor siendo este de diferentes tipos
 -JavaScrip: tine varias palabras reservadas para identivicar un valor como variable entre estas esta var, let, const
	     cada una tiene sus diferencias
	-var: es la reprecentación dondede se guadan valores(puede ser de cualquier tipo)

		-sintaxis de la variable
			var nombre_de_la_variable = valor_a_guardar;

		-sintaxis de tipo objeto array
			var nombre_del_array = ["valor1","valor2","valo3"]

		-sintaxis de tipo objeto dicionario
			var nombre_del_objeto = {
				nombre:"julian",
				apellidos:"Camargo"
				edad: 26
			}


	-let:
	-const:
--------------------------------------------------------------------------------------------------------------------------
--Clase 5 Qué son las funciones en JavaScript-----------------------------------------------------------------------------

nota:las funciones son un conjunto de sentencias, estas se definen en 2 Declarativas y Expresión

//Declarativas

function nombre_funci (){
	return 3;
}

--para llamar una funcion se puede simplemente colocar el nombre de la funcion

monbre_funci();



// Expresión o anonimas

//en los () van los parametros estos son valores que es les envia a la funcion

var otramifuncion = function(){
 return a+b;   
}

//de igual manera para llamar a una funcion de expresion se coloca el el nombre

otramifuncion()

//EJERCICIOS CON LA CONSOLA DEL NAVEGADOR

function saludoEstudiantes(estudiantes){
    console.log(`Hola ${estudiantes}`); // esto concatena lo que tenga la variable estudiande con hola 
}

saludoEstudiantes("Diego"); // en esta linea se llama la función 


function suma(a,b){
    var resultado = a+b;
    return resultado;
}

suma(3,4);

--------------------------------------------------------------------------------------------------------------------------
--Clase 6 Scope-----------------------------------------------------------------------------------------------------------

¿qué es el Scope?
--es el alcance que tienen las variables, esto depende de donde declares e inicialices una variable y
--de si se va a tener acceso o no, se tiene dos tipos de Scope.

--en este Scope existen todas las variables,todas las variaciones y funciones que se tengan, cuando se 
--inicializa una funición en esta se crea un Scope local y solo lo que este dentro de la funcion va a 
--tener acceso así mismo, pero si tengo una variable inicializada y decalrada en el Scope Global dentro
--de un Scope Local esta pueden entrar dentro del local, ahora todo lo que este en gloabal no puedo 
--acceder a lo local. 

// ejemplo de Scope Global y local

var miNombre = "Jose";

function nombre(){
    var apellido = "Caceres"
    console.log(miNombre +' '+ apellido);
}

nombre(); // esta linea permite llamar desde el Scope global la funcion nombre

miNombre; // llama la variable que esta en el Scope global

apellido; // ESTO LLAMA LA VARIABLE DESDE GLOBAL ESTANDO EN LOCAL ESTO NO ES PERMITIDO

--------------------------------------------------------------------------------------------------------------------------
--Clase 7 Hoisting-----------------------------------------------------------------------------------------------------------

--Hoisting: es cuando las variable y las funciones se declaran antes de que se procese cualquier tipo de codigo.

// ESTOS SON EJEMPLOS DE HOISTING

console.log(minombre); // mustra por la consola del navegador el resultado 
var minombre = "Jose Daniel"; // se esta declarando una variable y se inicializa la variable

//esta estructura se llama un avariable antes de declararla e inicializarla
//ahora si 

var niNombre =undefined;

console.log(niNombre+ "Soy ese Hoisting"); //al hacer esto lo que va a salir es "undefined Soy ese Hoisting"
niNombre = "Jose daniel"; // luego solo va a retornar el valor de "Jose Daniel"

//ESTE ES UN EJEMPLO DE HOISTING CON FUNCIONES

hey();// llamar una funcion 
// en este caso va si llamamos la funcion antes de declararla si puede llegar a tomar el valor que se espera 
// siempre y cuando la variables esten declaras e inicializadas antes de llamar esa funcion
function hey(){// declarar una funcion
    console.log("Hola " + miNombre);
}
// hasta este punto el valor que retorna la funcion sera "Hola undefined"

var miNombre = "Jose Daniel";

//nota buena practica: las funciones siempres deben estar al inicio del codigo

--------------------------------------------------------------------------------------------------------------------------
--Clase 8 Coerción--------------------------------------------------------------------------------------------------------

existen 2 tipos de Coerciónes implicitas y explicitas

//coerciones implicitas: cocuren cuando el lenguaje ayuda y cambia un tipo de valor a otro tipo de valor 
//coercion significa :la forma en que se puede cambiar un tipo de valor a otro tipo de valor

//coerciones explicitas: es cuando nosotros obligamos a que un valor de un tipo cambie a otro valor de otro tipo si necesitamos
// este fuera de un valor distinto

// para conprovar el tipo de variable se puede hacer esto
var a = 4 + "7"; //coercion implicita
typeof a; // su valor va hacer un string

// en esta el lenguaje interpreta que lo que queriamos decir
// es que el 7 es un numero y no un string
var b = 4 * "7"; //coercion implicita
typeof b; // su valor va hacer un numero

// ahora se vera la coercion explicita de esta manera tenemos el ejemplo 
var c = 20;
var d = c + "";
var coer = String(c); // con esta linea se pretende obligar a la variable c a cambiar de num a string
// esto tambien se puede hacer para otros tipos de valores
var coer2 = Number(coer);

--------------------------------------------------------------------------------------------------------------------------
--Clase 9 Valores: Truthy y Falsy-----------------------------------------------------------------------------------------

¿que valores son falsos y que valores son verdaderos?

//Ejemplos en los que Boolean devuelve Falso:
Boolean(0); //false
Boolean(null); //false
Boolean(NaN); //false
Boolean(undefined); //false
Boolean(false); //false
Boolean(""); //false

//Ejemplos en los que Boolean devuelve verdadero:
Boolean(1); //true para 1 o cualquier número diferente de cero (0)
Boolean("a"); //true para cualquier caracter o espacio en blanco en el string
Boolean([]); //true aunque el array esté vacío
Boolean({}); //true aunque el objeto esté vacío
Boolean(function(){}); //Cualquier función es verdadera también

--------------------------------------------------------------------------------------------------------------------------
--Clase 10 Operadores: Asignación, Comparación y Aritméticos-----------------------------------------------------------------------------------------

Operador de asignacion
Simbolo	Descripcion
=	operador de asignacion
Operadores de comparacion
Simbolo	Descripcion
==	igual que
===	estrictamente igual que
> or >= or >==	mayor o mayor igual que
< or <= or <==	menor o menor igual que
!= or !==	diferente que
Operadores aritmeticos
Simbolo	Descripcion
+	operador suma este se utiliza para concatener dos cadenas de texto.
-	operador resta
*	operador de multicacion
/	operador de division
%	operador de modulo
**	operador de potenciacion
tambien se les conoce como operadores binarios. por que toman dos valores y generan un resultado.

Operadores logicos
Simbolo	Descripcion
!	NOT niega un valor
&&	AND
||	OR

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators

--------------------------------------------------------------------------------------------------------------------------
--Clase 11 Condicionales: If, Else, else if-------------------------------------------------------------------------------